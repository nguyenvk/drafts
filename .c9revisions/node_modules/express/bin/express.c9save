{"ts":1366166737925,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs')\n  , os = require('os')\n  , exec = require('child_process').exec\n  , mkdirp = require('mkdirp');\n\n/**\n * Framework version.\n */\n\nvar version = '2.5.8';\n\n/**\n * Add session support.\n */\n\nvar sessions = false;\n\n/**\n * CSS engine to utilize.\n */\n\nvar cssEngine;\n\n/**\n * End-of-line code.\n */\n\nvar eol = os.platform\n  ? ('win32' == os.platform() ? '\\r\\n' : '\\n')\n  : '\\n';\n\n/**\n * Template engine to utilize.\n */\n\nvar templateEngine = 'jade';\n\n/**\n * Usage documentation.\n */\n\nvar usage = ''\n  + '\\n'\n  + '  Usage: express [options] [path]\\n'\n  + '\\n'\n  + '  Options:\\n'\n  + '    -s, --sessions           add session support\\n'\n  + '    -t, --template <engine>  add template <engine> support (jade|ejs). default=jade\\n'\n  + '    -c, --css <engine>       add stylesheet <engine> support (stylus). default=plain css\\n'\n  + '    -v, --version            output framework version\\n'\n  + '    -h, --help               output help information\\n'\n  ;\n\n/**\n * Routes index template.\n */\n\nvar index = [\n    ''\n  , '/*'\n  , ' * GET home page.'\n  , ' */'\n  , ''\n  , 'exports.index = function(req, res){'\n  , '  res.render(\\'index\\', { title: \\'Express\\' })'\n  , '};'\n].join(eol);\n\n/**\n * Jade layout template.\n */\n\nvar jadeLayout = [\n    '!!!'\n  , 'html'\n  , '  head'\n  , '    title= title'\n  , '    link(rel=\\'stylesheet\\', href=\\'/stylesheets/style.css\\')'\n  , '  body!= body'\n].join(eol);\n\n/**\n * Jade index template.\n */\n\nvar jadeIndex = [\n    'h1= title'\n  , 'p Welcome to #{title}'\n].join(eol);\n\n/**\n * EJS layout template.\n */\n\nvar ejsLayout = [\n    '<!DOCTYPE html>'\n  , '<html>'\n  , '  <head>'\n  , '    <title><%= title %></title>'\n  , '    <link rel=\\'stylesheet\\' href=\\'/stylesheets/style.css\\' />'\n  , '  </head>'\n  , '  <body>'\n  , '    <%- body %>'\n  , '  </body>'\n  , '</html>'\n].join(eol);\n\n/**\n * EJS index template.\n */\n\nvar ejsIndex = [\n    '<h1><%= title %></h1>'\n  , '<p>Welcome to <%= title %></p>'\n  ].join(eol);\n\n/**\n * Default css template.\n */\n\nvar css = [\n    'body {'\n  , '  padding: 50px;'\n  , '  font: 14px \"Lucida Grande\", Helvetica, Arial, sans-serif;'\n  , '}'\n  , ''\n  , 'a {'\n  , '  color: #00B7FF;'\n  , '}'\n].join(eol);\n\n/**\n * Default stylus template.\n */\n\nvar stylus = [\n    'body'\n  , '  padding: 50px'\n  , '  font: 14px \"Lucida Grande\", Helvetica, Arial, sans-serif'\n  , 'a'\n  , '  color: #00B7FF'\n].join(eol);\n\n/**\n * App template.\n */\n\nvar app = [\n    ''\n  , '/**'\n  , ' * Module dependencies.'\n  , ' */'\n  , ''\n  , 'var express = require(\\'express\\')'\n  , '  , routes = require(\\'./routes\\');'\n  , ''\n  , 'var app = module.exports = express.createServer();'\n  , ''\n  , '// Configuration'\n  , ''\n  , 'app.configure(function(){'\n  , '  app.set(\\'views\\', __dirname + \\'/views\\');'\n  , '  app.set(\\'view engine\\', \\':TEMPLATE\\');'\n  , '  app.use(express.bodyParser());'\n  , '  app.use(express.methodOverride());{sess}{css}'\n  , '  app.use(app.router);'\n  , '  app.use(express.static(__dirname + \\'/public\\'));'\n  , '});'\n  , ''\n  , 'app.configure(\\'development\\', function(){'\n  , '  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));'\n  , '});'\n  , ''\n  , 'app.configure(\\'production\\', function(){'\n  , '  app.use(express.errorHandler());'\n  , '});'\n  , ''\n  , '// Routes'\n  , ''\n  , 'app.get(\\'/\\', routes.index);'\n  , ''\n  , 'app.listen(3000);'\n  , 'console.log(\"Express server listening on port %d in %s mode\", app.address().port, app.settings.env);'\n  , ''\n].join(eol);\n\n// Parse arguments\n\nvar args = process.argv.slice(2)\n  , path = '.';\n\nwhile (args.length) {\n  var arg = args.shift();\n  switch (arg) {\n    case '-h':\n    case '--help':\n      abort(usage);\n      break;\n    case '-v':\n    case '--version':\n      abort(version);\n      break;\n    case '-s':\n    case '--session':\n    case '--sessions':\n      sessions = true;\n      break;\n    case '-c':\n    case '--css':\n      args.length\n        ? (cssEngine = args.shift())\n        : abort('--css requires an argument');\n      break;\n    case '-t':\n    case '--template':\n      args.length\n        ? (templateEngine = args.shift())\n        : abort('--template requires an argument');\n      break;\n    default:\n        path = arg;\n  }\n}\n\n// Generate application\n\n(function createApplication(path) {\n  emptyDirectory(path, function(empty){\n    if (empty) {\n      createApplicationAt(path);\n    } else {\n      confirm('destination is not empty, continue? ', function(ok){\n        if (ok) {\n          process.stdin.destroy();\n          createApplicationAt(path);\n        } else {\n          abort('aborting');\n        }\n      });\n    }\n  });\n})(path);\n\n/**\n * Create application at the given directory `path`.\n *\n * @param {String} path\n */\n\nfunction createApplicationAt(path) {\n  console.log();\n  process.on('exit', function(){\n    console.log();\n    console.log('   dont forget to install dependencies:');\n    console.log('   $ cd %s && npm install', path);\n    console.log();\n  });\n\n  mkdir(path, function(){\n    mkdir(path + '/public');\n    mkdir(path + '/public/javascripts');\n    mkdir(path + '/public/images');\n    mkdir(path + '/public/stylesheets', function(){\n      switch (cssEngine) {\n        case 'stylus':\n          write(path + '/public/stylesheets/style.styl', stylus);\n          break;\n        default:\n          write(path + '/public/stylesheets/style.css', css);\n      }\n    });\n\n    mkdir(path + '/routes', function(){\n      write(path + '/routes/index.js', index);\n    });\n\n    mkdir(path + '/views', function(){\n      switch (templateEngine) {\n        case 'ejs':\n          write(path + '/views/layout.ejs', ejsLayout);\n          write(path + '/views/index.ejs', ejsIndex);\n          break;\n        case 'jade':\n          write(path + '/views/layout.jade', jadeLayout);\n          write(path + '/views/index.jade', jadeIndex);\n          break;\n      }\n    });\n\n    // CSS Engine support\n    switch (cssEngine) {\n      case 'stylus':\n        app = app.replace('{css}', eol + '  app.use(require(\\'stylus\\').middleware({ src: __dirname + \\'/public\\' }));');\n        break;\n      default:\n        app = app.replace('{css}', '');\n    }\n\n    // Session support\n    app = app.replace('{sess}', sessions\n      ? eol + '  app.use(express.cookieParser());' + eol + '  app.use(express.session({ secret: \\'your secret here\\' }));'\n      : '');\n\n    // Template support\n    app = app.replace(':TEMPLATE', templateEngine);\n\n    // package.json\n    var json = '{' + eol;\n    json += '    \"name\": \"application-name\"' + eol;\n    json += '  , \"version\": \"0.0.1\"' + eol;\n    json += '  , \"private\": true' + eol;\n    json += '  , \"dependencies\": {' + eol;\n    json += '      \"express\": \"' + version + '\"' + eol;\n    if (cssEngine) json += '    , \"' + cssEngine + '\": \">= 0.0.1\"' + eol;\n    if (templateEngine) json += '    , \"' + templateEngine + '\": \">= 0.0.1\"' + eol;\n    json += '  }' + eol;\n    json += '}';\n\n\n    write(path + '/package.json', json);\n    write(path + '/app.js', app);\n  });\n}\n\n/**\n * Check if the given directory `path` is empty.\n *\n * @param {String} path\n * @param {Function} fn\n */\n\nfunction emptyDirectory(path, fn) {\n  fs.readdir(path, function(err, files){\n    if (err && 'ENOENT' != err.code) throw err;\n    fn(!files || !files.length);\n  });\n}\n\n/**\n * echo str > path.\n *\n * @param {String} path\n * @param {String} str\n */\n\nfunction write(path, str) {\n  fs.writeFile(path, str);\n  console.log('   \\x1b[36mcreate\\x1b[0m : ' + path);\n}\n\n/**\n * Prompt confirmation with the given `msg`.\n *\n * @param {String} msg\n * @param {Function} fn\n */\n\nfunction confirm(msg, fn) {\n  prompt(msg, function(val){\n    fn(/^ *y(es)?/i.test(val));\n  });\n}\n\n/**\n * Prompt input with the given `msg` and callback `fn`.\n *\n * @param {String} msg\n * @param {Function} fn\n */\n\nfunction prompt(msg, fn) {\n  // prompt\n  if (' ' == msg[msg.length - 1]) {\n    process.stdout.write(msg);\n  } else {\n    console.log(msg);\n  }\n\n  // stdin\n  process.stdin.setEncoding('ascii');\n  process.stdin.once('data', function(data){\n    fn(data);\n  }).resume();\n}\n\n/**\n * Mkdir -p.\n *\n * @param {String} path\n * @param {Function} fn\n */\n\nfunction mkdir(path, fn) {\n  mkdirp(path, 0755, function(err){\n    if (err) throw err;\n    console.log('   \\033[36mcreate\\033[0m : ' + path);\n    fn && fn();\n  });\n}\n\n/**\n * Exit with the given `str`.\n *\n * @param {String} str\n */\n\nfunction abort(str) {\n  console.error(str);\n  process.exit(1);\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":8402}]],"length":8402}
