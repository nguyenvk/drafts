{"ts":1366166436197,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs');\n\n/**\n * Arguments.\n */\n\nvar args = process.argv.slice(2)\n  , pending = args.length\n  , files = {};\n\nconsole.log('');\n\n// parse arguments\n\nargs.forEach(function(file){\n  var mod = file.replace('lib/', '');\n  fs.readFile(file, 'utf8', function(err, js){\n    if (err) throw err;\n    console.log('  \\033[90mcompile : \\033[0m\\033[36m%s\\033[0m', file);\n    files[file] = parse(js);\n    --pending || compile();\n  });\n});\n\n/**\n * Parse the given `js`.\n */\n\nfunction parse(js) {\n  return parseInheritance(parseConditionals(js));\n}\n\n/**\n * Parse __proto__.\n */\n\nfunction parseInheritance(js) {\n  return js\n    .replace(/^ *(\\w+)\\.prototype\\.__proto__ * = *(\\w+)\\.prototype *;?/gm, function(_, child, parent){\n      return child + '.prototype = new ' + parent + ';\\n'\n        + child + '.prototype.constructor = '+ child + ';\\n';\n    });\n}\n\n/**\n * Parse the given `js`, currently supporting:\n * \n *    'if' ['node' | 'browser']\n *    'end'\n * \n */\n\nfunction parseConditionals(js) {\n  var lines = js.split('\\n')\n    , len = lines.length\n    , buffer = true\n    , browser = false\n    , buf = []\n    , line\n    , cond;\n\n  for (var i = 0; i < len; ++i) {\n    line = lines[i];\n    if (/^ *\\/\\/ *if *(node|browser)/gm.exec(line)) {\n      cond = RegExp.$1;\n      buffer = browser = 'browser' == cond;\n    } else if (/^ *\\/\\/ *end/.test(line)) {\n      buffer = true;\n      browser = false;\n    } else if (browser) {\n      buf.push(line.replace(/^( *)\\/\\//, '$1'));\n    } else if (buffer) {\n      buf.push(line);\n    }\n  }\n\n  return buf.join('\\n');\n}\n\n/**\n * Compile the files.\n */\n\nfunction compile() {\n  var buf = '';\n  buf += '\\n// CommonJS require()\\n\\n';\n  buf += browser.require + '\\n\\n';\n  buf += 'require.modules = {};\\n\\n';\n  buf += 'require.resolve = ' + browser.resolve + ';\\n\\n';\n  buf += 'require.register = ' + browser.register + ';\\n\\n';\n  buf += 'require.relative = ' + browser.relative + ';\\n\\n';\n  args.forEach(function(file){\n    var js = files[file];\n    file = file.replace('lib/', '');\n    buf += '\\nrequire.register(\"' + file + '\", function(module, exports, require){\\n';\n    buf += js;\n    buf += '\\n}); // module: ' + file + '\\n';\n  });\n  fs.writeFile('ejs.js', buf, function(err){\n    if (err) throw err;\n    console.log('  \\033[90m create : \\033[0m\\033[36m%s\\033[0m', 'ejs.js');\n    console.log();\n  });\n}\n\n// refactored version of weepy's\n// https://github.com/weepy/brequire/blob/master/browser/brequire.js\n\nvar browser = {\n  \n  /**\n   * Require a module.\n   */\n  \n  require: function require(p){\n    if ('fs' == p) return {};\n    var path = require.resolve(p)\n      , mod = require.modules[path];\n    if (!mod) throw new Error('failed to require \"' + p + '\"');\n    if (!mod.exports) {\n      mod.exports = {};\n      mod.call(mod.exports, mod, mod.exports, require.relative(path));\n    }\n    return mod.exports;\n  },\n  \n  /**\n   * Resolve module path.\n   */\n\n  resolve: function(path){\n    var orig = path\n      , reg = path + '.js'\n      , index = path + '/index.js';\n    return require.modules[reg] && reg\n      || require.modules[index] && index\n      || orig;\n  },\n  \n  /**\n   * Return relative require().\n   */\n\n  relative: function(parent) {\n    return function(p){\n      if ('.' != p.substr(0, 1)) return require(p);\n      \n      var path = parent.split('/')\n        , segs = p.split('/');\n      path.pop();\n      \n      for (var i = 0; i < segs.length; i++) {\n        var seg = segs[i];\n        if ('..' == seg) path.pop();\n        else if ('.' != seg) path.push(seg);\n      }\n\n      return require(path.join('/'));\n    };\n  },\n  \n  /**\n   * Register a module.\n   */\n\n  register: function(path, fn){\n    require.modules[path] = fn;\n  }\n};"]],"start1":0,"start2":0,"length1":0,"length2":3712}]],"length":3712}
